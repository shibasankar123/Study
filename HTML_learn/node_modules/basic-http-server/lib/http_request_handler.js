"use strict";
var uuid = require('node-uuid');
var Stopwatch = require('node-hrstopwatch');
var logger = require('./logger');
var HttpStatusCodes = require('./http_status_codes');
var HttpResponseHandler = require('./http_response_handler');

class HttpRequestHandler {
    constructor(routing) {
        this.routing = routing;
    }

    handle(request, response) {
        let stopwatchForRequest = new Stopwatch();
        stopwatchForRequest.start();
        let requestId = uuid.v4();
        let responseHandler = new HttpResponseHandler(response, requestId, stopwatchForRequest);
        logger.info({req_id: requestId, req: request});

        let data = '';
        request.on('data', (chunk) => {
            data += chunk.toString();
        });

        let handler = this.routing.getRouteHandler(request.url, request.method);
        request.on('end', () => {
            HttpRequestHandler._process(requestId, data, handler, responseHandler);
        });
    }

    static _process(requestId, data, handler, responseHandler) {
        if (!handler) {
            responseHandler.sendError(HttpStatusCodes.NotFound);
        } else {
            let document = data ? HttpRequestHandler.parseJsonBody(data) : null;
            console.log(handler);
            handler(requestId, document)
                .then((status) => {
                    responseHandler.send(status.statusCode, null);
                })
                .catch((status) => {
                    responseHandler.sendError(status.statusCode, status.err);
                });
        }
    }

    static parseJsonBody(body) {
        try {
            return JSON.parse(body);
        } catch (err) {
            return null;
        }
    }
}

module.exports = HttpRequestHandler;