"use strict";

var assert = require('assert');
var sinon = require('sinon');
var HttpResponseHandler = require('./../server/http_response_handler');

describe('http_response_handler', function() {
    beforeEach(function() {
        this.response = {
            writeHead: function(statusCode) {},
            end: function(data) {}
        };

        this.stopwatch = {
            stop: function() {},
            getDuration: function() {}
        };
    });

    it('should initialise correctly', function() {
        let response = Symbol();
        let requestId = Symbol();
        let stopwatch = Symbol();
        let sut = new HttpResponseHandler(response, requestId, stopwatch);

        assert.equal(response, sut.response);
        assert.equal(requestId, sut.requestId);
        assert.equal(stopwatch, sut.stopwatch);
        assert.equal(false, sut.responseSent);
    });

    it('should send a response', function() {
        let responseStub = sinon.stub(this.response);
        let stopwatchStub = sinon.stub(this.stopwatch);
        let requestId = '123';

        let sut = new HttpResponseHandler(responseStub, requestId, stopwatchStub);
        sut.send(200, 'some data');

        assert(responseStub.writeHead.calledOnce);
        assert(responseStub.writeHead.calledWith(200));
        assert(responseStub.end.calledOnce);
        assert(responseStub.end.calledWith('some data'));
        assert(sut.responseSent);
    });

    it('should throw an exception if trying to send a response again', function() {
        let responseStub = sinon.stub(this.response);
        let stopwatchStub = sinon.stub(this.stopwatch);
        let requestId = '123';

        let response = new HttpResponseHandler(responseStub, requestId, stopwatchStub);
        response.send(200, 'some data');

        let sut = function() {
            response.send(200, 'more data');
        };

        assert.throws(sut, /Response can only be sent once/);
    });

    it('should send an error code correctly', function() {
        let responseStub = sinon.stub(this.response);
        let stopwatchStub = sinon.stub(this.stopwatch);
        let requestId = '123';
        let error = new Error('something went wrong');

        let sut = new HttpResponseHandler(responseStub, requestId, stopwatchStub);
        sut.sendError(500, error);

        assert(responseStub.writeHead.calledOnce);
        assert(responseStub.writeHead.calledWith(500));
        assert(responseStub.end.calledOnce);
        assert(responseStub.end.calledWith(undefined));
        assert(sut.responseSent);
    });
});